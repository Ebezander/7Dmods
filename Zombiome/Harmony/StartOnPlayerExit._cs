using Harmony;
using System.Reflection;
using UnityEngine;
using DMT;
using System;
using System.Collections.Generic;

// GameManager.public void Disconnect()
// ConnectionManager.public void DisconnectClient(ClientInfo _cInfo, bool _bShutdown = false)

[HarmonyPatch(typeof(GameManager))]
[HarmonyPatch("Disconnect")] // GameManager.public void Disconnect()
public class StartOnPlayerExit : IHarmony {
    // world private void unloadEntity(Entity _e, EnumRemoveEntityReason _reason)
	// 
    public void Start() {
        Debug.Log(" Loading Patch: " + GetType().ToString());
        var harmony = HarmonyInstance.Create(GetType().ToString());
        CSutils.Harmonys.ApplyOnce(harmony, Assembly.GetExecutingAssembly(), GetType());
        // harmony.PatchAll(Assembly.GetExecutingAssembly());
    }

    static void Prefix() {
        Debug.Log("StartOnPlayerExit Postfix hook");
        if (StartOnPlayerSpawn.useHarmony) Zombiome.OnDisconnect();
    }

}