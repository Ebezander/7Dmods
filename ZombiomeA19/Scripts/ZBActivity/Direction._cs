using System.Xml;
using System;
using System.Collections;
using UnityEngine;
using System.Collections.Generic;

using System.Linq;
using System.Reflection.Emit;


 
public abstract class Direction {

    public static Vector3 upward(Vector3 v) {
        v.y = Math.Abs(v.y);
        return v;
    }
    public static Vector3 normalized(Vector3 v) {return v.normalized;}

    public static Position Horizontal(float ray, Vector3 center = new Vector3(), bool nml = false, bool hor=true) {
        Position uniform = new Around(center, ray);
        if (hor) uniform.D2 = true;
        if (nml) uniform.constraint = normalized;
        return uniform;
    }

    public abstract Vector3 Get(Vector3 position, int step); // "feu de brousse" veut espacer de 5 block
    public Vector3 center;
    public float ray;
    public int len = 0;
    protected GameRandom rand;
    protected bool D2 = true; // D2 <=> delta.y=0
    protected bool sphere = false; // D2 <=> delta.y=0
    public Func<Vector3,Vector3> constraint = null;
    public Direction(Vector3 center, float ray) {
        this.center = center;
        this.ray = ray;
        rand = GameRandomManager.Instance.CreateGameRandom();
    }
}

public abstract class Position : Direction {
    public virtual Bounds Bounds {
        get {return new Bounds(center, ray * Vectors.Float.One);}
    }
    public Position(Vector3 center, float ray) : base(center, ray) {}
}

public class Around : Position {
    public Around(Vector3 center, float ray) : base(center, ray) {}
    public override Vector3 Get(Vector3 position, int step) {
        Vector3 delta = ray * new Vector3(rand.RandomFloat, rand.RandomFloat, rand.RandomFloat);
        if (D2) delta.y = 0f;
        if (center == null) return position + delta;
        if (constraint != null) delta = constraint(delta);
        return center + delta;
    }
}

public class AtPlayer : Around {
    public EntityPlayer player;
    public Vector3 center {
        get{return player.GetPosition();}
    }
    public AtPlayer(EntityPlayer player, float ray) : base(player.GetPosition(), ray) {
        this.player = player;
    }
}

public class AtZChunk : Position {
    // Get(k) suppose un nombre connu Ã  l'avance ?
    // Use a size attribute ?
    // if infinite, use IEnumerator
    Vector3i zchunk;
    public override Bounds Bounds {
        get {return ZChunk.Bounds(zchunk, -2);} // -2 use getterrainheight, or should we store player ?
    }
    public AtZChunk(Vector3i zchunk) : base(Vectors.ToFloat(ZChunk.Center(zchunk)), (float) ZChunk.size) {
        this.zchunk = zchunk;
    }
    public override Vector3 Get(Vector3 position, int step) {
        return ZChunk.Position(Zombiome.worldSeed, zchunk, step);
    }
}



