using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020001CE RID: 462
public class BlockWaterTransition : Block {
	/*
TODO
- un moyen de start plus tot les schedule

	*/

	private static bool IsWater(BlockValue bv) {return bv.Block.blockMaterial.IsLiquid;}
		// {return bv.Block.blockMaterial == MaterialBlock.water;}
	private static bool IsWater(Block blk) {return blk.blockMaterial.IsLiquid;}

	public static System.Random Random = new System.Random();

	public string Into = "";
	public float IntoRate = 1f;
	public string Particle = ""; // still todo
	public float ParticleRate = 1f;
	public BlockWaterTransition() {
		base.IsNotifyOnLoadUnload = false;
		this.IsRandomlyTick = true; // false; //
	}

	public override void Init() {
		base.Init();
		if (this.Properties.Values.ContainsKey("Into")) this.Into = this.Properties.Values["Into"];
		if (this.Properties.Values.ContainsKey("IntoRate"))
			this.IntoRate = float.Parse(this.Properties.Values["IntoRate"]);
		if (this.Properties.Values.ContainsKey("Particle")) this.Into = this.Properties.Values["Particle"];

		lastUT = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
	}

	public override ulong GetTickRate() {
		// return 20UL; // 1 second or 1 minute ? 20 fps ?
		// return 5UL*20UL; // quite long time
		return 50UL; // 50UL: approx 50 sec !
		// 5UL: approx 50 sec too !!
		// return 0UL;
		// return 1L;
	}

	// TODO prolonger exploration state local avec nn-1/
	// public static Vector3i[] belows = new Vector3i[]{
	// 	new Vector3i(0,-1,0), new Vector3i(1,-1,0), new Vector3i(-1,-1,0),
	// 	new Vector3i(0,-1,1), new Vector3i(0,-1,-1), new Vector3i(1,-1,1), new Vector3i(-1,-1,1),
	// 	new Vector3i(1,-1,-1), new Vector3i(-1,-1,-1)
	// };
	public static Vector3i[] belows = new Vector3i[]{new Vector3i(0,-1,0)};
	
	private bool Transition(Vector3i _blockPos) {
		if (Into=="") return false;
		if (Random.NextDouble() >= IntoRate) return false;
		BlockValue transformed = Block.GetBlockValue(Into); // SdtdUtils.Blocks.BlockSetter.GenBlockValue(Block.GetBlockByName(Into));
		GameManager.Instance.World.SetBlockRPC(0, _blockPos, transformed);
		return true;
		// add particle if true (evap)
	}

	public static bool IsEmpty(Block block) {
		if (IsWater(block)) return false;
		if (block.IsPathSolid) return false;
		if (block.shape.IsTerrain()) return false;
		return true;
	}

	private long lastUT;	
	public override bool UpdateTick(WorldBase _world, int _clrIdx, Vector3i _blockPos, BlockValue _blockValue, bool _bRandomTick, ulong _ticksIfLoaded, GameRandom _rnd) {
		// FIXME: dont let water merge ?
		// bad test return _blockValue.type == this.blockID;
		// test material !!!
		// TODO: loop for air for faster fall. but how to speedup the check ?
		//FIXME: ca descend trop bas (dans ground ?) fterrain n'a pas de IsSolid !!
		bool ret = base.UpdateTick(_world, _clrIdx, _blockPos, _blockValue, _bRandomTick, _ticksIfLoaded, _rnd);
		long now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
		World World = GameManager.Instance.World;
		// Debug.Log(String.Format("BlockWaterTransition.UpdateTick {0}", now - lastUT));
		lastUT = now;
		if (Transition(_blockPos)) return ret;
		BlockValue self = World.GetBlock(_blockPos);
		foreach(Vector3i below in belows) {
			BlockValue existing = World.GetBlock(_blockPos + below);
			if (IsEmpty(existing.Block)) {
				// Printer.Print("-- IsPathSolid", existing.Block.GetBlockName(), existing.Block.IsPathSolid, existing);
				// NB: IsPathSolid is false for terrain
				int rec = 0; // speed up the next updates if directly below
				for (int k=1; k<5; k++) {
					rec = rec + 1;
					BlockValue bbelow = World.GetBlock(_blockPos + below - rec * CSutils.Vectors.UnitY);
					if (! IsEmpty(bbelow.Block)) break;
				}
				Printer.Print("BlockWaterTransition ->", existing, below - (rec-1) * CSutils.Vectors.UnitY);
				Vector3i target = _blockPos + below - (rec-1) * CSutils.Vectors.UnitY;
				existing = World.GetBlock(target);

				// GameManager.Instance.World.SetBlockRPC(0, target, self);
				GameManager.Instance.World.SetBlockRPC(0, target, Block.GetBlockValue(self.Block.GetBlockName()));
				GameManager.Instance.World.SetBlockRPC(0, _blockPos, BlockValue.Air);
				// need elastic ? above water block wo gravity would vanish ?
				break;
			}
		}
		return true; // ret;
	}

	public override void OnNeighborBlockChange(WorldBase world, int _clrIdx, Vector3i _myBlockPos, BlockValue _myBlockValue,
					Vector3i _blockPosThatChanged, BlockValue _newNeighborBlockValue, BlockValue _oldNeighborBlockValue) {
		Printer.Print("OnNeighborBlockChange", _myBlockPos, _blockPosThatChanged);
		if (_myBlockPos.y != _blockPosThatChanged.y + 1) return; // only react to below block
		if (! IsEmpty(_newNeighborBlockValue.Block)) return; // only when below is empty
		// dont care if it was previously empty or not
		int k = 0;
		for (k=0; k< 10; k++) {
			_blockPosThatChanged.y = _blockPosThatChanged.y - 1;
			BlockValue current = GameManager.Instance.World.GetBlock(_blockPosThatChanged);
			if (! IsEmpty(_oldNeighborBlockValue.Block)) {
				_blockPosThatChanged.y = _blockPosThatChanged.y + 1; // last empty
				break;
			}
		}
		GameManager.Instance.World.SetBlockRPC(_myBlockPos, BlockValue.Air); // should look above to speed up
		if (k < 10) GameManager.Instance.World.SetBlockRPC(_blockPosThatChanged, _myBlockValue);
	}

	
}