using System;
using System.Collections.Generic;
using UnityEngine;

using CSutils;

// Token: 0x020001CE RID: 462
public class BlockWaterTransitionSimpleV0 : Block {
	/**
	NB: the same block instance manages multiple BlockValue
	-> cant implement lifetime

	if I had blockvalue based state (meta ?)
	- UpdateTick 1st call
		- stable : set state, skip next UpdateTick
		- otherwise, move, add Scheduled change, dont skip next
		- UpdateTick would restore unstable state (for the next call to UpdateTick * or add scheduled direct!)

	TODO: into from biome ( snow / des/burnt=> air )
	*/

	private static bool IsWater(BlockValue bv) {return bv.Block.blockMaterial.IsLiquid;}
		// {return bv.Block.blockMaterial == MaterialBlock.water;}
	private static bool IsWater(Block blk) {return blk.blockMaterial.IsLiquid;}

	public static System.Random Random = new System.Random();

	// public float dt = 0f;
	public string Into = "";
	public float IntoRate = 1f;
	// public int damage = 0;
	// public string Particle = ""; // still todo
	// public float ParticleRate = 1f;
	public bool onb = true; // can I use damage as state ?
	public BlockWaterTransitionSimpleV0() {
		base.IsNotifyOnLoadUnload = true;
		this.IsRandomlyTick = true; // false; //
	}

	public override void Init() {
		base.Init();
		if (this.Properties.Values.ContainsKey("Into")) this.Into = this.Properties.Values["Into"];
		if (this.Properties.Values.ContainsKey("IntoRate"))
			this.IntoRate = float.Parse(this.Properties.Values["IntoRate"]);
		if (this.Properties.Values.ContainsKey("Particle")) this.Into = this.Properties.Values["Particle"];
		if (this.Properties.Values.ContainsKey("onb")) this.onb = bool.Parse(this.Properties.Values["onb"]);

		lastUT = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
	}

	public override ulong GetTickRate() {return 1UL;}

	// TODO prolonger exploration state local avec nn-1/
	// public static Vector3i[] belows = new Vector3i[]{
	// 	new Vector3i(0,-1,0), new Vector3i(1,-1,0), new Vector3i(-1,-1,0),
	// 	new Vector3i(0,-1,1), new Vector3i(0,-1,-1), new Vector3i(1,-1,1), new Vector3i(-1,-1,1),
	// 	new Vector3i(1,-1,-1), new Vector3i(-1,-1,-1)
	// };
	public static Vector3i[] belows = new Vector3i[]{new Vector3i(0,-1,0)};
	
	private bool Transition(Vector3i _blockPos, bool force=false) {
		bool skip = Random.NextDouble() >= IntoRate;
		Printer.Print("BlockWaterTransitionSimple", Into, _blockPos, "skip:", skip, this.GetHashCode());
		if (Into == "") return false;
		if (skip) return false;
		BlockValue transformed = Block.GetBlockValue(Into); // SdtdUtils.Blocks.BlockSetter.GenBlockValue(Block.GetBlockByName(Into));
		GameManager.Instance.World.SetBlockRPC(0, _blockPos, transformed);
		return true;
		// add particle if true (evap)
	}

	public static bool IsEmpty(Block block) {
		if (IsWater(block)) return false;
		if (block.IsPathSolid) return false;
		if (block.shape.IsTerrain()) return false;
		return true;
	}

	private long lastUT;	
	/* FIXME: slow bc all blocks treated at once.
	the game has a quick callback that add scheduled block update (run more smoothly - should I do it ?)

	*/
	public override bool UpdateTick(WorldBase _world, int _clrIdx, Vector3i _blockPos, BlockValue _blockValue, bool _bRandomTick, ulong _ticksIfLoaded, GameRandom _rnd) {
		bool ret = base.UpdateTick(_world, _clrIdx, _blockPos, _blockValue, _bRandomTick, _ticksIfLoaded, _rnd);
		long now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
		World World = GameManager.Instance.World;
		lastUT = now;
		if (Transition(_blockPos)) return true;
		BlockValue below = World.GetBlock(_blockPos - Vectors.UnitY);
		if (below.Equals(BlockValue.Air) || IsEmpty(below.Block)) {
			string into = (Into=="") ? "air" : Into;
			GameManager.Instance.World.SetBlockRPC(
				0, _blockPos,
				(Into=="") ? BlockValue.Air : Block.GetBlockValue(Into)
			);
			return true;
		}
		// TODO: base on player distance (continue forever after teleport )
		// regle la scalabilit√© en tt cas

		// this.DamageBlock(_world, 0, _blockPos, _blockValue, 10, -1, false, false);

		// Block.list[_blockValue.type].MaxDamage

		// _blockValue.meta = (byte) (_blockValue.meta + 1);
		// if (_blockValue.meta == 15)
		// {
		// 	this.DamageBlock(_world, 0, _blockPos, _blockValue, 10, -1, false, false);
		// }
		// else
		// {
		// 	_world.SetBlockRPC(_clrIdx, _blockPos, _blockValue);
		// }


		// Destroy: send Block.list[_blockValue.type].MaxDamage

		// if (Into !="" )
		// should I check class = block (detect changed)
		// could start GetWBT when setblockRPC, rather than waiting
			GameManager.Instance.World.GetWBT().AddScheduledBlockUpdate(0, _blockPos, this.blockID, GetTickRate());

		return ret;
	}

	public override void OnNeighborBlockChange(WorldBase world, int _clrIdx, Vector3i _myBlockPos, BlockValue _myBlockValue,
					Vector3i _blockPosThatChanged, BlockValue _newNeighborBlockValue, BlockValue _oldNeighborBlockValue) {
		Printer.Print("OnNeighborBlockChange", _myBlockPos, _blockPosThatChanged, this.GetHashCode(), "damage", _myBlockValue.damage);
		if (! this.onb) return;
		if (_myBlockPos.y != _blockPosThatChanged.y + 1) return; // only react to below block
		if (! IsEmpty(_newNeighborBlockValue.Block)) return; // only when below is empty
		// dont care if it was previously empty or not
		int k = 0;
		for (k=0; k< 10; k++) {
			_blockPosThatChanged.y = _blockPosThatChanged.y - 1;
			BlockValue current = GameManager.Instance.World.GetBlock(_blockPosThatChanged);
			if (! IsEmpty(current.Block)) {
				_blockPosThatChanged.y = _blockPosThatChanged.y + 1; // last empty
				break;
			}
		}
		// GameManager.Instance.World.SetBlockRPC(_myBlockPos, BlockValue.Air); // should look above to speed up
		// does not trigger OnNeighborBlockChange of the above water block ??

		// Ne fait pas disparaitre le block, il a une vie < 0 ...
		// mais si je lui met une hp ???
		// int mdom = Block.list[_myBlockValue.type].MaxDamage;
		int mdom = _myBlockValue.damage; 
		this.DamageBlock(GameManager.Instance.World, 0, _myBlockPos, _myBlockValue, 10, -1, false, false);

		if (k < 10) GameManager.Instance.World.SetBlockRPC(_blockPosThatChanged, _myBlockValue);
	}
}