using Harmony;
using System.Reflection;
using UnityEngine;
using DMT;
using System;
using System.Collections.Generic;

// using CSutils;

[HarmonyPatch(typeof(GameManager))]
[HarmonyPatch("PlayerSpawnedInWorld")] // public void PlayerSpawnedInWorld(ClientInfo _cInfo, RespawnType _respawnReason, Vector3i _pos, int _entityId)
public class StartOnPlayerSpawn : IHarmony {

    public static bool useHarmony = false;

    // world private void unloadEntity(Entity _e, EnumRemoveEntityReason _reason)
	// GameManager.public void PlayerDisconnected(ClientInfo _cInfo)
    public void Start() {
        Debug.Log(" Loading Patch: " + GetType().ToString());
        var harmony = HarmonyInstance.Create(GetType().ToString());
        CSutils.Harmonys.ApplyOnce(harmony, Assembly.GetExecutingAssembly(), GetType());
        // harmony.PatchAll(Assembly.GetExecuting Assembly());
        if (false) {
            var original = typeof(GameManager).GetMethod("PlayerSpawnedInWorld");
            var info = harmony.GetPatchInfo(original);
            if (info == null) {
                harmony.PatchAll(Assembly.GetExecutingAssembly());
                return;
            }
        }
        if (false) {
            var original = typeof(GameManager).GetMethod("PlayerSpawnedInWorld");
            var postfix = typeof(StartOnPlayerSpawn).GetMethod("Postfix");
            harmony.Patch(original, null, new HarmonyMethod(postfix));
        }
    }
   static void Postfix(ClientInfo _cInfo, RespawnType _respawnReason, Vector3i _pos, int _entityId) {
       Debug.Log("StartOnPlayerSpawn Postfix hook"); // also trigger on teleport (hence i guess respawn)
       if (useHarmony) Zombiome.StartOnPlayerSpawn(_cInfo, _respawnReason, _pos, _entityId);

   }
}